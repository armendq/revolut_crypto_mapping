name: run

on:
  schedule:
    # Trigger every 5 minutes; the router below decides which mode to run.
    - cron: "*/5 * * * *"
  workflow_dispatch:
    inputs:
      force_mode:
        description: "Override mode: deep | light-hourly | light-fast | skip | auto"
        required: false
        default: "auto"

# needed for commit + Pages deploy
permissions:
  contents: write
  pages: write
  id-token: write

env:
  PYTHONUNBUFFERED: "1"

jobs:
  run:
    runs-on: ubuntu-latest
    timeout-minutes: 25

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          # keep default token so push works
          persist-credentials: true

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Ensure output tree
        run: |
          mkdir -p public_runs/latest
          mkdir -p mapping
          echo "Tree OK"

      # (optional) mapping generation — keep if your repo uses it
      - name: Generate Revolut ↔ Binance mapping (optional)
        run: |
          set -e
          if [ -f scripts/generate_mapping.py ]; then
            echo "[mapping] generating…"
            python scripts/generate_mapping.py
          else
            echo "[mapping] no generator found; skipping."
          fi

      # -------- DECIDE MODE with ±1 minute tolerance --------
      - name: Decide run mode (deep / light-fast / light-hourly)
        id: decide
        shell: bash
        run: |
          set -euo pipefail

          FORCE="${{ github.event.inputs.force_mode || '' }}"
          if [[ -n "${FORCE}" && "${FORCE}" != "auto" ]]; then
            echo "mode=${FORCE}" >> "$GITHUB_OUTPUT"
            echo "Override -> ${FORCE}"
            exit 0
          fi

          M=$(date -u +%M); M=$((10#$M))
          within() { local m=$1 t=$2 tol=${3:-1}; local d=$(( (m - t + 60) % 60 )); [[ $d -le $tol || $((60-d)) -le $tol ]]; }

          MODE=""
          for t in 0 15 30 45; do if within "$M" "$t" 1; then MODE="deep"; break; fi; done
          if [[ -z "$MODE" ]] && within "$M" 2 1; then MODE="light-hourly"; fi
          if [[ -z "$MODE" ]]; then
            for t in 0 5 10 15 20 25 30 35 40 45 50 55; do
              if within "$M" "$t" 1; then MODE="light-fast"; break; fi
            done
          fi
          [[ -z "$MODE" ]] && MODE="skip"

          echo "mode=${MODE}" >> "$GITHUB_OUTPUT"
          echo "Selected mode: ${MODE} (UTC minute=${M})"

      - name: Skip if no matching cadence
        if: steps.decide.outputs.mode == 'skip'
        run: echo "No matching cadence window now; exiting."

      # -------- ANALYSES --------
      - name: Run analyses (deep)
        if: steps.decide.outputs.mode == 'deep'
        run: |
          set -euo pipefail
          echo "[router] Running DEEP analyses"
          python -m scripts.analyses --mode deep

      - name: Run analyses (light-fast, ~every 5m)
        if: steps.decide.outputs.mode == 'light-fast'
        run: |
          set -euo pipefail
          echo "[router] Running LIGHT-FAST analyses"
          python -m scripts.analyses --mode light-fast

      - name: Run analyses (light-hourly at :02)
        if: steps.decide.outputs.mode == 'light-hourly'
        run: |
          set -euo pipefail
          echo "[router] Running LIGHT-HOURLY analyses"
          python -m scripts.analyses --mode light-hourly

      # (optional) quick local validation, never fail the job
      - name: Validate summary.json (local)
        if: steps.decide.outputs.mode != 'skip'
        continue-on-error: true
        run: |
          test -s public_runs/latest/summary.json
          python - <<'PY'
          import json,sys
          j=json.load(open("public_runs/latest/summary.json"))
          assert "signals" in j and "regime" in j
          print("summary.json looks OK")
          PY

      # -------- COMMIT ARTIFACTS TO MAIN (safe rebase with retries) --------
      - name: Commit public_runs to main
        if: steps.decide.outputs.mode != 'skip'
        shell: bash
        env:
          GIT_AUTHOR_NAME: github-actions[bot]
          GIT_AUTHOR_EMAIL: 41898282+github-actions[bot]@users.noreply.github.com
          GIT_COMMITTER_NAME: github-actions[bot]
          GIT_COMMITTER_EMAIL: 41898282+github-actions[bot]@users.noreply.github.com
        run: |
          set -euo pipefail

          # Only add the paths we expect
          ADD_LIST=()
          [ -d public_runs ] && ADD_LIST+=("public_runs")
          [ -d mapping ] && ADD_LIST+=("mapping")

          if [ ${#ADD_LIST[@]} -eq 0 ]; then
            echo "Nothing to add."
            exit 0
          fi

          git add "${ADD_LIST[@]}" || true
          if git diff --cached --quiet; then
            echo "No changes to commit."
            exit 0
          fi

          git commit -m "chore(run): artifacts $(date -u +'%Y-%m-%dT%H:%M:%SZ') [${{ steps.decide.outputs.mode }}]"

          # Rebase & push with retries (handles concurrent runs)
          for attempt in 1 2 3; do
            echo "Sync attempt ${attempt}…"
            # autostash guards against local commits conflicting during pull
            git pull --rebase --autostash origin main || true
            if git push origin HEAD:main; then
              echo "Push succeeded."
              exit 0
            fi
            echo "Push failed on attempt ${attempt}; retrying in 3s…"
            sleep 3
          done

          echo "Push failed after retries"; exit 1

      # -------- DEPLOY TO GH-PAGES --------
      - name: Upload Pages artifact
        if: steps.decide.outputs.mode != 'skip'
        uses: actions/upload-pages-artifact@v3
        with:
          path: public_runs

      - name: Deploy to gh-pages
        if: steps.decide.outputs.mode != 'skip'
        id: deploy
        uses: actions/deploy-pages@v4

      # -------- VERIFY PAGES ENDPOINT (non-blocking) --------
      - name: Verify Pages endpoint (non-blocking)
        if: always() && steps.decide.outputs.mode != 'skip'
        continue-on-error: true
        env:
          PAGES_URL: ${{ steps.deploy.outputs.page_url }}
        run: |
          URL="${PAGES_URL:-https://armendq.github.io/revolut_crypto_mapping/}"
          echo "Checking ${URL}"
          curl -I --max-time 15 --retry 2 --retry-delay 2 "$URL" || true